package org.apache.jsp.about.publications;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class aem_005fasnt_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent {

  private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

  private static java.util.List _jspx_dependants;

  static {
    _jspx_dependants = new java.util.ArrayList(3);
    _jspx_dependants.add("/includes/index/header.jsp");
    _jspx_dependants.add("/includes/index/../head_search.html");
    _jspx_dependants.add("/includes/common/analytics.htm");
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.AnnotationProcessor _jsp_annotationprocessor;

  public Object getDependants() {
    return _jspx_dependants;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_annotationprocessor = (org.apache.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.AnnotationProcessor.class.getName());
  }

  public void _jspDestroy() {
  }

  public void _jspService(HttpServletRequest request, HttpServletResponse response)
        throws java.io.IOException, ServletException {

    PageContext pageContext = null;
    HttpSession session = null;
    ServletContext application = null;
    ServletConfig config = null;
    JspWriter out = null;
    Object page = this;
    JspWriter _jspx_out = null;
    PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<html>\n<head><title>Extending a Digital Library: Beginning a Roman Perseus</title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/css/hopper.css\"/>\n<script type=\"text/javascript\" src=\"/js/hopper.js\"></script>\n</head>\n<body onload=\"checkRedirect();\">\n");
      out.write("<div id=\"header\">\n\t<a id=\"banner\" href=\"/hopper/\">\n\t</a>\n\t<div id=\"header_side\">\n\t\t");
      out.write("<form action=\"/hopper/searchresults\" class=\"search_form\" onsubmit=\"return validate_form(this,q);\">\n    <input name=\"q\" />\n    <input type=\"submit\" value=\"Search\" />\n    <p>(\"Agamemnon\", \"Hom. Od. 9.1\", \"denarius\")</p>\n    <p><a href=\"/hopper/search\">All Search Options</a> [<a href=\"javascript:abbrev_help()\">view abbreviations</a>]</p>\n</form>\n");
      out.write("\n\t</div>\n</div>\n");
      out.write("\n\n<div id=\"main\">\n    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/includes/index/indexNav.jsp" + (("/includes/index/indexNav.jsp").indexOf('?')>0? '&': '?') + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("tabActive", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("about", request.getCharacterEncoding()) + "&" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("subtabActive", request.getCharacterEncoding())+ "=" + org.apache.jasper.runtime.JspRuntimeLibrary.URLEncode("publications", request.getCharacterEncoding()), out, false);
      out.write(" \t\n    <div id=\"content\" class=\"2column\">\n        <div id=\"index_main_col\">\n\t\t<div id=\"publications\">\n\t\t\n\t\t<p>Creating an Infrastructure for Scholarly Publication On Line<br/>\n\t\tAnne Mahoney\n\t\t</p>\n\t\t\n\t\t<h4>Abstract</h4>\n<p>The Stoa Consortium aims to promote collaborative scholarship, published on line and freely available to other scholars and general readers.  As a publisher, we must provide \nthe mechanisms for making these scholarly works available.  As an on-line publisher, we intend to provide more than what a good print publisher can provide: electronic texts can \nbe explicitly connected as books cannot. </p>\n<p>A digital library project generally produces and controls its own texts and images.  This makes it relatively easy to interconnect those resources.  A digital publisher, on the \nother hand, does not produce texts itself, and indeed the works published under its auspices need not all live on the same computer system.  Interconnection in this environment \nrequires more explict co-operation by the authors and editors of the text:  specifically, use of the same markup rules. </p>\n");
      out.write("<p>Markup for us means SGML or XML, conforming to the TEI DTD and following Stoa conventions for which features to mark, which values to use for certain attributes, and which \nmeta-data to include in the document header.  We have found that most scholars wishing to publish texts with us do not know SGML in general, or this DTD in particular. Although \nthey quickly see the benefits of structured markup, they must learn the language and the local idiom.  The first piece of publishing infrastructure, then, is support for markup: \ndocumentation, editing software, and validators. </p>\n<p>Many authors also want detailed control over the appearance of their work.  They expect, sometimes unconsciously, that the technology of the Web as it exists today is and will \nbe the final, best way to publish their work.  While we prefer to take a longer-term, more general view, we recognize that on-line publication today does in fact mean the Web.  \nThe second piece of infrastructure is display formatting, whether for the Web, for printing, or for some future delivery medium. </p>\n");
      out.write("<p>The third piece of infrastructure is interconnection, which is what makes on-line publication fundamentally different from print. Interconnection means that references to other \nobjects, outside the text, can automatically be hyperlinked to those objects.  The typical digital library model is that objects within the library can be hyperlinked to each \nother, while objects outside are not linked. Since the digital publishing house does not \"contain\" its texts, on the other hand, there is no reason for it to restrict these \nreference connections to only works it has published itself.  The Stoa has developed a reference database that allows any work published by the Stoa to refer to any resource \nelsewhere on the Internet.  Hyperlinks are generated when the text is displayed, which means they are always as current as the content of the database. </p>\n\n<p>The Stoa's tool set will be made available as open-source software, and we hope that other on-line publishers and digital libraries may wish to share reference information. </p>\n");
      out.write("\n<h4>Introduction</h4>\n<p>The Stoa Consortium was founded in 1998 to promote collaborative scholarship  in the humanities, particularly the classics.  The Stoa also intends to promote  technical \nstandards, for text encoding as well as for image capture, geographic  data recording, and other processes.  The best way to promote a standard is to  provide an application \nthat uses it.  For the text encoding standards the Stoa  wishes to use, that application is the Perseus text-processing system.  The  Perseus system works with texts encoded in \nSGML<a href=\"#fn1\" name=\"anch1\"><sup>1</sup></a> , using  the DTD of the <a href=\"http://www.tei-c.org\">Text Encoding Initiative</a>.   Those texts can be presented on the Web, \nconverted to PDF, searched, interlinked,  and indexed, based on structural and semantic information in the markup. </p>\n<p>The Perseus text system is an infrastructure, but it requires additional support,  both technical and social.  Technical support includes the ancillary applications that  \nfacilitate structured markup -- editors, syntax validators, documentation.  It  also includes applications relevant to the other parts of the system, for example  support for \n");
      out.write("image captioning and curatorial cataloguing, but those applications are  outside the focus of the present paper. </p>\n<p>Social support involves convincing the community that structured markup is  desirable and feasible.  Many potential Stoa collaborators are concerned that  structured markup \nmay be difficult to learn;  they would rather use a familiar tool,  for example a word processor like Microsoft Word or a typesetting language like  TeX.  Others note that works \npublished on the Web as it exists today must be  converted into HTML, and wonder why it's necessary to write in a different language,  then convert the text;  they'd rather write \nin HTML in the first place.  Still other  scholars expect, not unreasonably, that the technical details are the publisher's  problem;  just as they do not typeset their own books \nand articles for publication  in print, they do not see why they are expected to use an apparently complex  markup scheme for electronic publication.  While all these objections \nare  sensible enough, they do not take into account key reasons for using structured  markup.  I will discuss this further in section two. </p>\n");
      out.write("\n<p>The Perseus text system includes a variety of ways to change the display of  a text, some under the reader's control and some controlled by the author or  editor.  Stoa \ncollaborators who expect detailed control over the presentation of  their work can have it, up to the limits imposed by HTML of course.  In the Perseus  Digital Library, each \ncollection has its own logo and color scheme, but most of  them have a common appearance, indicating that they are all part of a single  digital library.  This is a choice made \nby the Perseus designers, not an intrinsic  feature of the software system, and it is in fact straightforward to change  the appearance of a collection of texts or even of an \nindividual document.  I  will go into more details in section three. </p>\n<p>The most important feature of the Perseus system is the array of sophisticated  features it provides for interconnecting texts.  Interconnection -- hyperlinking --  is what \nmakes on-line publication fundamentally different from print.  Originally,  I expected to implement tools for the Stoa, and last year produced a rudimentary  linking system for \n");
      out.write("certain kinds of references.  As I thought about the tools we  were producing for the Perseus Digital Library, however, I realized it was silly to  re-implement something similar, \nwhen what I really wanted for the Stoa was the full  power of the Perseus toolset.  The various automatically generated hypertexts, implicit  \"information-push\" searches, and \ndynamically generated reversible citations make this  digital library toolset one of the richest environments currently available for  on-line publication.  The Stoa has therefore \nadopted the Perseus toolset.  This has  also prompted the Perseus team to generalize the toolset and make it more widely  available.  Perseus has another collaborating project \nthat hopes to install and use  this application, and we expect that in the next year or so we will be able to  make the text processing system available to other projects as open \nsource software. </p>\n<p>In what follows, I will discuss the Stoa's technical and social support for structured  markup;  how Stoa projects might exploit the display mechanisms of the Perseus text \n");
      out.write("system;  and how structured markup facilitates interconnections among texts, not  just within a single collection but in a web of co-operating systems. </p>\n\n<h4>Markup Support</h4>\n<p>Technical support for structured markup is easy:  the basic tools are widely available.   Any number of editors, ranging from highly specialized SGML systems to general-purpose, \nconfigurable utilities, and at prices ranging from free to tens of thousands of dollars,  make it possible to edit structured text.  None of these editors is more difficult to  \nlearn than a modern word processor.   </p>\n<p>It is also important to be able to verify the correctness of SGML markup, and for this one  uses a validator.  Some editors have built-in validation capabilities, and some can \neven ensure  that the text being edited is never invalid.  It's also possible to use a separate validation  program.  A compromise between integral and separate validation is an \neditor that can call upon  the validation program when you ask it to.  However one invokes it, the SGML validator  identifies any syntactic problems with the markup of the text, \n");
      out.write("from mis-spelled tags to  missing structural levels.<a href=\"#fn2\" name=\"anch2\"><sup>2</sup></a>  </p>\n<p>Intermediate between technical support and what I'm calling social support  is documentation.  Good software should always have good documentation, and good  standards \nnecessarily have good documentation.  The documentation for the TEI DTD is excellent,  if a bit daunting in its magnitude.  The documentation for the DTD itself, however,  is not \nenough:  it's also necessary to explain the standards of the particular project,  and the rules imposed by the software that will process the SGML documents.  I have  written an \n<a href=\"http://www.stoa.org/markup\">explanation</a> of the Stoa's  particular guidelines, in tutorial form;  it's available on the Stoa's web server, where it  has been accessed \nover 6,700 times in the past year.  Technical information about  the implementation of the text system is available in a series of research articles  by members of the Perseus \ntechnical staff.  Additional documentation is always desirable, however.  In this case, particular desiderata include a detailed listing of the  conventions for attribute values, \n");
      out.write("the choices of features to be tagged, and other  project-specific and application-specific guidelines beyond the use of the TEI, as well  as detailed documentation of the major \ndata structures and processing flow in the  Perseus text system. </p>\n\n<p>But social support extends beyond documentation.  While it's straightforward to  explain how to create SGML documents, it is also important to explain why.  As I  outlined \nabove, there are several different reasons why  Stoa collaborators do not immediately embrace structured markup:  its presumed  difficulty, the apparent silliness of writing in \none language only to convert at  once to another, and the principle that it should be the publisher's responsibility  to do the publishing of a text.  I will consider each of \nthese in turn. </p>\n<p>Structured markup is not in itself difficult, nor is it a form of computer  programming.  Whenever we begin a new scholarly article by sketching out a title,  an abstract, \nand section headings, we are making a structured text.  When we  format the abstract in a smaller type face from the rest of the text, or make the  section headings larger and \n");
      out.write("bold, we are applying a markup that reflects the  structure.  All that SGML does is provide a formalism for expressing this kind  of structure in a way that <i>any</i> reader \nor <i>any</i> software  can exploit.  When we read a text, if we see occasional short lines of larger,  boldface letters, perhaps starting with a number, we recognize these \nlines as  section headings.  If we're skimming the text quickly, perhaps the section  headings are the only things we read.  We know these lines are section headings  because we \nhave a great deal of experience reading scholarly articles, and we  know how they are ordinarily laid out.  We can recognize the section headings  even if the article is written \nin a language we can't read. </p>\n<p>With SGML markup, the section headings are recognizable because they are  labelled.  Whereas in ordinary typographical \"markup\" the features are recognizable  by their \nappearance, and interpretable in the light of human experience, in  structured markup the features are recognizable and interpretable by their  names:  no human experience is \n");
      out.write("required.  In other words, a computer program can  find the section headings, for example to produce a table of contents. </p>\n<p>In the case of our section headings, it's pretty easy to recognize them  unambiguously:  nothing else in the text is likely to be a short line of larger,  boldface letters.  \nConsider a harder case, a word or phrase in italics.  The  human reader easily recognizes whether an italicized phrase is a title, a  foreign phrase, a reported thought, or an \nemphasized phrase;  these are  conventional uses of italics, and context usually makes clear which is which.  A  program scanning a file, however, has no context, because it \ncannot actually  read the text.<a href=\"#fn3\" name=\"anch3\"><sup>3</sup></a>   If you want to list the works  cited in the article, or make a glossary of the foreign phrases, \nyou'll need to  inspect all the italicized phrases and decide why each one is in italics.  With  SGML markup, instead of italicizing several different kinds of phrases for  \nseveral different reasons, we mark each one with what it is:  a title, a  phrase in a particular language (which we specify), a reported thought, an  emphasized phrase, or \n");
      out.write("whatever else it might be.  Display processing may indeed  render all of these as italics, but the additional information is available  to be exploited by indexing tools, \nautomatic dictionary lookups, and so on.   </p>\n\n<p>Structured markup, then, allows authors to do the same kinds of things we  do with our word processors, but also allows us to store more and clearer  information. </p>\n<p>But if we are simply going to turn those titles, foreign words, and so on  back into italics, why did we bother marking them up?  This is the second  objection:  why write \nSGML if we are only displaying HTML? </p>\n<p>If all you are going to do with your SGML documents is convert them to  HTML, then this objection is correct:  you have no need of SGML.  The point of  a digital library \nsystem, however, is that you can do much more with structured  documents.  Every important feature of the Perseus text processing system is  based on the fact that the documents \nare encoded in SGML, not HTML;  marked  for their structure, not their appearance.  That they are displayed on the Web  in HTML form is an ephemeral fact, not an intrinsic \n");
      out.write("fact about the texts;  the  same SGML files can be converted to other formats for other purposes.  As new  display technologies are developed, it will be possible to use them to \nrender  SGML files, based on the semantic information in their markup, without changing  the SGML files at all.  HTML files, on the other hand, will not necessarily  be \nautomatically compatible with any other format at all.  The information  extraction and visualization tools of the Perseus text system also exploit  the structural and semantic \ninformation of the SGML files. </p>\n<p>The third objection to SGML raised by some Stoa collaborators is that markup  should be the publisher's problem, just as it is in print.  Print publishers  accept text \nfrom authors, then convert it to whatever form their in-house system  requires.  Even if the publisher chooses to use SGML, the author might submit  the text on paper, to be \nre-keyed by the publisher's staff. </p>\n<p>This is, indeed, how many publishers do business now, but not all.  In fact,  some publishers of printed books and journals ask for submissions in SGML,  according to a DTD \n");
      out.write("they specify.  This is a great advantage for them, because  the texts come from their authors already in the correct form for further  processing.  It is also an advantage for \nthe authors, because they can  unambiguously specify the semantics of their text.  Good SGML markup makes clear  which sections are major and which are sub-sections or \nsub-sub-sections or  sub-sub-sub-sections;  this is difficult to do with typography, and error  prone with outline numbering.  SGML markup can also identify words in other  \nlanguages, to facilitate spell-checking;  can give regularized forms for words in  non-standard dialects<a href=\"#fn4\" name=\"anch4\"><sup>4</sup></a> ;  or can ensure  that \nfootnotes sit next to the text they comment on, rather than on some other page.  An  author who marks up a manuscript with SGML is indicating exactly what each element  of \nthe text <i>means</i>, not just what it might look like.  In asking for  submissions in SGML form, the Stoa is being progressive. </p>\n\n<h4>Display</h4>\n<p>Regular users of the Perseus Digital Library are accustomed to the look of its  texts.  In most of the Perseus collections, text is displayed in a single window,  with global \n");
      out.write("tools in a top bar and collection-specific tools in a side bar.  The background  color of these tool bars identifies the collection.  All Perseus text pages look  much alike. </p>\n<p>The designers of the Perseus Digital Library web site chose to retain a common  style throughout, but the appearance of the pages is highly configurable.  In fact, one  of the \ncollections, the Tufts University History collection, has a distinctly  different appearance and somewhat different behavior. </p>\n<p>The Perseus text processing system allows specification of a display template  for a collection, to be used by all the texts in the collection;  an individual  text may also \nhave an overriding template of its own.  The templates for HTML  display are written in HTML augmented with calls to processing functions that can  fetch text or meta-data.  It \nis also possible to override portions of the SGML  conversion rules for particular elements, and this too may be done at the level  of the collection or of the individual \ndocument. </p>\n");
      out.write("\n<h4>Interconnection</h4>\n<p>The point of using a digital library system is to interconnect the objects in  the library.  In a print library, books are implicitly connected:  when a book about  Sophocles \nrefers to Aeschylus, the author indicates the play and line number, and the  reader is free to pull out a text of the older playwright and read the passage.  In  a well-implemented \ndigital library, those connections will be explicit.  When the  on-line edition of the Sophocles book refers to Aeschylus, there will be a live link  at the point of the citation, \nwhich the reader can follow to find the passage in  Aeschylus.  In the Perseus Digital Library, moreover, this link goes both ways.  Someone  reading Aeschylus will see a link \nback to the book about Sophocles which refers to  the passage. </p>\n<p>At present, these interconnections operate only within a single digital library.   The Perseus group expects to make interconnections available among co-operating libraries,  \nforming a federation.  This will involve common meta-data rules and naming standards,  so that for example Homer's <a href=\"/hopper/text?doc=Hom.+Il.\"><i>Iliad</i></a> is always  \n");
      out.write("identified in the same way.  Each library in the federated group must make its  catalog available to the others.  Suppose a reader in one of the libraries requests  a section \nof a book about Sophocles.  The digital library system will display the  desired section, and will link the references to Sophocles's plays to copies of those  texts available \nat another co-operating library, for example at Perseus.  The Perseus  group expects to work on implementing such a system after the text processing system  is in use at the \nStoa. </p>\n<p>Citations are not the only kind of interconnections among texts, or between texts  and other objects.  The Perseus text processing system can recognize place names,  dates, \nand keywords in texts and link them automatically to appropriate tools, based  on the contents of the digital library.  These implicit searches will work in any  digital library \nthat uses the Perseus text processing system.  As with citations,  however, it is also quite desirable to make these searches work throughout a group of  co-operating libraries;  \n");
      out.write("this is a future direction. </p>\n\n<h4>Conclusions</h4>\n<p>The Perseus digital library system is a powerful tool for on-line publishing of  structured text.  The Stoa will be installing this system for its own texts, and  will \nultimately join in a federated digital library group with the Perseus Digital  Library.  To make the Perseus system work for Stoa collaborators, those collaborators  will need \nto embrace structured markup. </p>\n\n<hr>\n<p><a href=\"#anch1\" name=\"fn1\"><sup>1</sup></a>&nbsp;Or XML;  the differences  between SGML and XML are not significant for the present paper.</p>\n<p><a href=\"#anch2\" name=\"fn2\"><sup>2</sup></a>&nbsp;Most SGML validators cannot verify the semantics of the  markup, however.  For example, they cannot check whether text marked \nas prose is really  verse, or whether a quote marked as Latin is really French.  Moreover, they usually cannot  check whether syntactically valid SGML conforms to the project's \nguidelines.  For example,  it is valid according to the TEI DTD to mark a phrase as a quotation, without indicating a  language.  When the quotation is in a different language \n");
      out.write("from the surrounding text, the  Stoa's standards require that the language be indicated.  SGML validators cannot verify  this because all they know is that the DTD allows \n<b>quote</b> elements with or without the  <b>lang</b> attribute.</p>\n<p><a href=\"#anch3\" name=\"fn3\"><sup>3</sup></a>&nbsp;This is generally true of text processors.  Programs that  can parse natural language, or that have access to dictionaries \nfor the main  language of the text or of foreign languages that might appear in it, can  often disambiguate italics as humans do.</p>\n<p><a href=\"#anch4\" name=\"fn4\"><sup>4</sup></a>&nbsp;e.g. Attic equivalents for the comic Spartan dialect  in <a href=\"/hopper/text?doc=Aristoph.+Lys.\"><i>Lysistrata</i></a>\n\n\t\t</div> <!-- Publications div -->\t\n\t</div> <!-- main_col div -->\n        \n    </div> <!-- 2column div -->\n</div> <!-- main div -->\n\n<!-- Google Analytics --> \n");
      out.write("<script type=\"text/javascript\">\nvar gaJsHost = ((\"https:\" == document.location.protocol) ? \"https://ssl.\" : \"http://www.\");\ndocument.write(unescape(\"%3Cscript src='\" + gaJsHost + \"google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E\"));\n</script>\n<script type=\"text/javascript\">\nvar pageTracker = _gat._getTracker(\"UA-4545594-2\");\npageTracker._initData();\npageTracker._trackPageview();\n</script>");
      out.write("\n\n</body>\n</html>\n");
    } catch (Throwable t) {
      if (!(t instanceof SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try { out.clearBuffer(); } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
